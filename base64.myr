use std

pkg base64=
	const dlen : (buf : byte[:] -> std.size)
	const elen : (buf : byte[:] -> std.size)
	const decode : (bufi : byte[:], bufo : byte[:] -> void)
	const encode : (bufi : byte[:], bufo : byte[:] -> void)
;;

const table : byte[:]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

const dlen={buf
	var pad=0
	if buf[buf.len-1]==('=' : byte)
		pad++
	;;
	if buf[buf.len-2]==('=' : byte)
		pad++
	;;
	->((buf.len/4)*3)-pad
}

const elen={buf
	if buf.len%3==0
		->(buf.len/3)*4
	else
		->(buf.len/3)*4+4
	;;
}

const decode={bufi, bufo
	var i, j, b, l
	j=0
	l=bufi.len

	while bufi[l-1]==('=' : byte)
		l--
	;;

	for i=0; i<l; i+=4
		b=0
		b|=(std.get(std.lsearch(table, bufi[i], std.numcmp)) : uint64)<<18
		b|=(std.get(std.lsearch(table, bufi[i+1], std.numcmp)) : uint64)<<12
		if i+2<l
			b|=(std.get(std.lsearch(table, bufi[i+2], std.numcmp)) : uint64)<<6
		;;
		if i+3<l
			b|=(std.get(std.lsearch(table, bufi[i+3], std.numcmp)) : uint64)
		;;
		if j<bufo.len
			bufo[j++]=255&((b>>16) : byte)
		;;
		if j<bufo.len
			bufo[j++]=255&((b>>8) : byte)
		;;
		if j<bufo.len
			bufo[j++]=255&(b : byte)
		;;
	;;
}

const encode={bufi, bufo
	var i, j, b
	j=0

	for i=0; i<bufi.len; i+=3
		b=0
		b|=(bufi[i] : uint64)<<16

		if i+1<bufi.len
			b|=(bufi[i+1] : uint64)<<8
		;;
		if i+2<bufi.len
			b|=(bufi[i+2] : uint64)
		;;

		bufo[j++]=table[63&(b>>18)]
		bufo[j++]=table[63&(b>>12)]

		if i+1<bufi.len
			bufo[j++]=table[63&(b>>6)]
		else
			bufo[j++]=('=' : byte)
		;;
		if i+2<bufi.len
			bufo[j++]=table[63&b]
		else
			bufo[j++]=('=' : byte)
		;;
	;;
}
